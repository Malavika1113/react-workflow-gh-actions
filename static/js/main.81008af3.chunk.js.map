{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","a","console","log","jsondata","JSON","stringify","ref","auth","process","API_KEY","fetch","method","headers","GITHUB_TOKEN","body","then","responseData","json","responseJson","catch","error","className","type","name","required","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mSAkGeA,G,MA9FH,WASV,IAAMC,EAAW,uCAAG,8BAAAC,EAAA,sDACnBC,QAAQC,IAAI,eACRC,EAAWC,KAAKC,UAAU,CAC1BC,IAAK,WAGS,OAChBC,EAAO,SAAWC,sKAAYC,QAClCR,QAAQC,IAAIC,GACZF,QAAQC,IAAI,qBACZD,QAAQC,IAAIK,GACZN,QAAQC,IAAI,yBAEIM,UACdP,QAAQC,IAAIM,WAEbE,MAAM,mHAAoH,CACtHC,OAXe,OAYfC,QAAS,CACX,OAAU,8BACV,cAAgB,SAAhB,OAA0BJ,sKAAYK,cACtC,uBAAwB,cAEtBC,KAAMX,IAELY,MAAK,SAACC,GAAD,OAAkBA,EAAaC,UACpCF,KAVL,uCAUU,WAAOG,GAAP,SAAAlB,EAAA,sDACLC,QAAQC,IAAI,iBADP,2CAVV,uDAaKiB,OAAM,SAACC,GACNnB,QAAQC,IAAI,mBA9BE,4CAAH,qDA+DjB,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAGA,8BACC,yBAAKA,UAAU,mBACb,mDACA,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,UAAQ,KAE1C,yBAAKH,UAAU,mBACb,8CACA,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,UAAQ,KAEzC,4BAAQC,QAAS1B,GAAjB,cC/EW2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMqB,c","file":"static/js/main.81008af3.chunk.js","sourcesContent":["//import {useState} from 'react';\nimport React from 'react';\nimport './App.css';\n\nconst App = () => {\n//   const [data, setData] = useState({data: []});\n// //  const [isLoading,setIsLoading] = useState(false);\n// //  const [err,setErr] = useState('');\n//   let userasd = {\n//   \tref: 'master'\n// \t};\n\n\n  const handleClick = async () => {\n\t  console.log(\"handleclick\")\n\t  let jsondata = JSON.stringify({\n      \tref: 'master',\n    \t});\n\n    let methodtype = 'POST';\n\tlet auth = 'Token ' + process.env.API_KEY\n\tconsole.log(jsondata)\n\tconsole.log(\"appending authsss\")\n\tconsole.log(auth)\n\tconsole.log(\"setting tokenssSSSAAA\")\n\t  /* eslint-disable no-unused-vars */\n\t  const token = process.env.REACT_APP_TEST\n\t  console.log(process.env.REACT_APP_TEST)\n\t  /* eslint-enable no-unused-vars */\n\t fetch(`https://api.github.com/repos/Malavika1113/react-workflow-gh-actions/actions/workflows/Reuseable-A.yml/dispatches`, {\n      method: methodtype,\n      headers: {\n\t   'Accept': 'application/vnd.github+json',\n\t   'Authorization': `token ${process.env.GITHUB_TOKEN}`,\n\t   'X-GitHub-Api-Version': '2022-11-28',\n      },\n      body: jsondata,\n    })\n      .then((responseData) => responseData.json())\n      .then(async (responseJson) => {\n       console.log('handle inside');\n      })\n      .catch((error) => {\n        console.log('error inside');\n      });\n\n//     try {\n//       const response = await fetch(`https://api.github.com/repos/Malavika1113/react-workflow-gh-actions/actions/workflows/Reuseable-A.yml/dispatches`, {\n//         Method: 'POST',\n// \t\tHeaders: {\n// \t\t\t'Accept': 'application/vnd.github+json',\n// \t\t\t'Authorization': `Bearer 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`,\n// \t\t\t'X-GitHub-Api-Version': '2022-11-28',\n// \t\t\t'Content-Type': 'application/json;charset=utf-8'\n// \t\t\t},\n// \t\tBody: JSON.stringify(userasd)\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Error! status: ${response.status}`);\n//       }\n\n//       const result = await response.json();\n\n//       console.log('result is: ', JSON.stringify(result, null, 4));\n\n//       setData(result);\n//     } catch (err) {\n//       //setErr(err.message);\n//     } finally {\n//       //setIsLoading(false);\n//     }\n  };\n\n//  console.log(data);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Data Ext Form\n        </p>\n        <form>\n         <div className=\"input-container\">\n           <label>Release Version </label>\n           <input type=\"text\" name=\"uname\" required />\n         </div>\n         <div className=\"input-container\">\n           <label>Model Type </label>\n           <input type=\"text\" name=\"pass\" required />\n         </div>\n         <button onClick={handleClick}>BUILD</button>\n        </form>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}